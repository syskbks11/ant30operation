/*
CfA CO(J=1-0) FITS file reader

1993/9/1	Tomoharu OKA	:	Coding 開始
1993/9/2	Tomoharu OKA	:	Ver.1.00 完成
1994/9/7	Tomoharu OKA	:	Bug fix for pixel inner structure
1995/6/20	Tomoharu OKA	:	FITS -> COLOMNS
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include <profhead.h>
#include <starlib.h>
#include <fitshead.h>

#define	DEBUG	0

#ifdef	_NO_PROTO
extern int read_FitsHeader();
extern int divide_Line();
extern int rm_Quot();
extern int get_MatrixData();
extern int OutputMatrixData();
#else
extern int read_FitsHeader(FITS_HEAD *, int *, AXIS_INDEX *, FILE *);
extern int divide_Line(char *, char *, char *, char *);
extern int rm_Quot(char *, char *);
extern int get_MatrixData(FITS_HEAD *, int, MATRIX *, AXIS_INDEX *, FILE *);
extern int OutputMatrixData(MATRIX *, FILE *);
#endif



main(argc,argv)
int	argc;
char	*argv[];
{
FILE		*fp_in, *fp_out;
int		err_code;
AXIS_INDEX	axis;
XY_POS		position;
FITS_HEAD	fits_head;
MATRIX		matrix;
int		offset;

/*	入力ファイルのオープン	*/

fp_in=stdin;
fp_out=stdout;



err_code=read_FitsHeader(&fits_head, &offset, &axis, fp_in);
if(err_code!=0){
	fprintf(stderr,"Error in reading the FITS header. Error code=%d\n",err_code);
	exit(999);
}

/*	Matrix data部分の構成	*/

err_code=get_MatrixData(&fits_head, offset, &matrix, &axis, fp_in);
if(err_code!=0){
	fprintf(stderr,"Error in creating the Matrix data. Error code=%d\n",err_code);
	if(err_code==101){
		fprintf(stderr,"FITS dimension must be 1.\n");
	}
	exit(999);
}

err_code=OutputMatrixData(&matrix,fp_out);
if(err_code!=0){
	fprintf(stderr,"Error in outputing the Matrix data. Error code=%d\n",err_code);
	exit(999);
}


}	/*main*/



int OutputMatrixData(matrix,fp_out)
MATRIX		*matrix;
FILE		*fp_out;
{
int	ii, jj;

if((*matrix).dim==1){
for(jj=1;jj<=(*matrix).num[1];jj++){
	fprintf(fp_out,"%9.2e\t%9.2e\n"
	,(*matrix).axisx[jj],(*matrix).data[jj][1]);
}
}	/*if((*matrix).dim==1)*/


else if((*matrix).dim==2){
if(((*matrix).num[1]!=0)&&((*matrix).num[2]==0)){
for(jj=1;jj<=(*matrix).num[1];jj++){
	fprintf(fp_out,"%9.2e\t%9.2e\n"
	,(*matrix).axisx[jj],(*matrix).data[jj][1]);
}
}
else if(((*matrix).num[1]==0)&&((*matrix).num[2]!=0)){
for(jj=1;jj<=(*matrix).num[2];jj++){
	fprintf(fp_out,"%9.3e\t%9.3e\n"
	,(*matrix).axisy[jj],(*matrix).data[1][jj]);
}
}
}	/*if((*matrix).dim==2)*/


return(0);

}


	


int get_MatrixData(fits_head, offset, matrix, axis, fp_in)
FITS_HEAD	*fits_head;
int		offset;
MATRIX		*matrix;
AXIS_INDEX	*axis;
FILE		*fp_in;

{
int	ii, jj;
int	data_bytepix;	/*	[byte]	*/
int	data_position;
int	header_record_length;
int	data_record_start;
int	err_code;
char	c;
short	data_short;
long	data_long;
float	data_float;
unsigned int	array_pos[MAX_DIMENSION];
int	byte;


data_bytepix=(*fits_head).bitpix/8;	


header_record_length=(int)ceil((double)offset/((double)BIT_RECORD/8.0));
data_record_start=header_record_length*BIT_RECORD/8;
#if DEBUG
fprintf(stderr,"Header record length=%ld [record] (%ld [byte])\n"
		,header_record_length,offset);
fprintf(stderr,"Data record start position=%ld [Bytes]\n",data_record_start);
#endif

if((*fits_head).naxis[0]!=1){
	if( ((*fits_head).naxis[0]==2)&&
		(((*fits_head).naxis[1]!=0)&&((*fits_head).naxis[2]!=0)) ){
		return(101);
	}
}
(*matrix).dim=(*fits_head).naxis[0];
(*matrix).dim=(*fits_head).naxis[0];
for(ii=1;ii<=(*matrix).dim;ii++){
	(*matrix).num[ii]=(*fits_head).naxis[ii];
}


for(ii=1;ii<=(*matrix).num[1];ii++){
	(*matrix).axisx[ii]=(*fits_head).crval[1]+
			(*fits_head).cdelt[1]*(float)(ii-(*fits_head).crpix[1]);
}
for(ii=1;ii<=(*matrix).num[2];ii++){
	(*matrix).axisy[ii]=(*fits_head).crval[2]+
			(*fits_head).cdelt[2]*(float)(ii-(*fits_head).crpix[2]);
}



byte=0;
while(byte<(data_record_start-header_record_length)){
	fread(&data_short,sizeof(data_short),1,fp_in);
	byte=byte+4;
}


for(ii=1;ii<=(*matrix).num[2];ii++){
	for(jj=1;jj<=(*matrix).num[1];jj++){
		if((*fits_head).bitpix==32){
			fread(&data_long,sizeof(data_long),1,fp_in);
			data_float=(float)data_long;	
		}
		else{
			fread(&data_short,sizeof(data_short),1,fp_in);	
			data_float=(float)data_short;	
		}
		(*matrix).data[jj][ii]=(float)(*fits_head).bscale*data_float
				+(float)(*fits_head).bzero;
/*	fprintf(stderr,"data[%d][%d]=%f\n",ii,jj,(*matrix).data[jj][ii]);	*/	
	}
}

return(0);
}




int calc_DataPosition(fits_head,array_pos)
FITS_HEAD	*fits_head;
unsigned int	array_pos[];
{
int	ii,jj;
double	sum, mult;

sum=0.0;
for(ii=1;ii<=(*fits_head).naxis[0];ii++){
	mult=1.0;
	for(jj=1;jj<ii;jj++){
		mult=mult * (double)((*fits_head).naxis[jj]);
	}
	mult=mult * ( (double)array_pos[ii]-1.0);
	sum=sum+mult;
}
return((int)sum);

}

	








int	read_FitsHeader(fits_head,offset,axis,fp_in)
FITS_HEAD 	*fits_head;
int		*offset;
AXIS_INDEX	*axis;
FILE		*fp_in;
{
int	ii;
char 	line[82];
char 	keyword[10];
char 	value[42];
char	comment[82];
char	buffer[10];

*offset=80;
while(1){
	fread(line,80,1,fp_in);
	line[80]=NULL;
#if DEBUG
	fprintf(stderr,"%s\n",line);
#endif
	divide_Line(line,keyword,value,comment);
	if(strncmp(keyword,"SIMPLE",6)==0){
		if(strncasecmp(value,"T",1)==0)		(*fits_head).simple=1;
		else if(strncasecmp(value,"F",1)==0)	(*fits_head).simple=0;
		else					(*fits_head).simple=0;
	}
	if(strncmp(keyword,"BITPIX",6)==0)
		(*fits_head).bitpix=(unsigned short)atoi(value);		
	if((strncmp(keyword,"NAXIS",5)==0)&&(strlen(keyword)==5))
		(*fits_head).naxis[0]=(unsigned long)atol(value);	

	for(ii=1;ii<=(*fits_head).naxis[0];ii++){
		sprintf(buffer,"%s%d","NAXIS",ii);
		if(strncmp(keyword,buffer,strlen(buffer))==0)
			(*fits_head).naxis[ii]=(unsigned long)atol(value);
	}
	if(strncmp(keyword,"BSCALE",6)==0)
		(*fits_head).bscale=(double)atof(value);
	if(strncmp(keyword,"BZERO",5)==0)
		(*fits_head).bzero=(double)atof(value);
	if(strncmp(keyword,"BUNIT",5)==0)
		strcpy((*fits_head).bunit,value);	
	if(strncmp(keyword,"BLANK",5)==0)
		(*fits_head).blank=(long)atol(value);
	if(strncmp(keyword,"OBJECT",6)==0)
		strcpy((*fits_head).object,value);	
	if(strncmp(keyword,"DATE-OBS",8)==0)
		strcpy((*fits_head).date_obs,value);	
	if(strncmp(keyword,"DATE-MAP",4)==0)
		strcpy((*fits_head).date_map,value);	
	if(strncmp(keyword,"ORIGIN",6)==0)
		strcpy((*fits_head).origin,value);	
	if(strncmp(keyword,"INSTRUME",8)==0)
		strcpy((*fits_head).instrume,value);	
	if(strncmp(keyword,"TELESCOP",8)==0)
		strcpy((*fits_head).telescop,value);	
	if(strncmp(keyword,"OBSERVER",8)==0)
		strcpy((*fits_head).observer,value);	
	for(ii=1;ii<=(*fits_head).naxis[0];ii++){
		sprintf(buffer,"%s%d","CRVAL",ii);
		if(strncmp(keyword,buffer,strlen(buffer))==0)
			(*fits_head).crval[ii]=(double)atof(value);
		sprintf(buffer,"%s%d","CRPIX",ii);
		if(strncmp(keyword,buffer,strlen(buffer))==0)
			(*fits_head).crpix[ii]=(double)atof(value);
		sprintf(buffer,"%s%d","CDELT",ii);
		if(strncmp(keyword,buffer,strlen(buffer))==0)
			(*fits_head).cdelt[ii]=(double)atof(value);
		sprintf(buffer,"%s%d","CTYPE",ii);
		if(strncmp(keyword,buffer,strlen(buffer))==0){
			(*fits_head).ctype[ii]=malloc(strlen(value)+1);
			strcpy((*fits_head).ctype[ii],value);
		}
	}
	if(strncmp(keyword,"DATAMAX",7)==0)		
		(*fits_head).datamax=(double)atof(value);
	if(strncmp(keyword,"DATAMIN",7)==0)		
		(*fits_head).datamin=(double)atof(value);
	if(strncmp(keyword,"EPOCH",5)==0)		
		(*fits_head).epoch=(double)atof(value);
	if(strncmp(keyword,"END",3)==0){
#if DEBUG
		fprintf(stderr,"\n*****************************************\n");
#endif
		break;
	}
	*offset=(*offset)+80;
}	/*	while loop	*/

for(ii=1;ii<=(*fits_head).naxis[0];ii++){
	if((*fits_head).ctype[ii]==NULL)	continue;
	if(strncmp((*fits_head).ctype[ii],"VELO-LSR",8)==0)	
		(*axis).v=ii;
	else if(strncmp((*fits_head).ctype[ii],"GLAT",4)==0)	
		(*axis).y=ii;
	else if(strncmp((*fits_head).ctype[ii],"GLON",4)==0)	
		(*axis).x=ii;
}





return(0);
}	/*	end of this function	*/



int	divide_Line(line, keyword, value, comment)
char	line[];
char	*keyword;
char	*value;
char	*comment;
{
char	*token;
char	*remnant;
char	*buffer;


if(strncmp(line,"COMMENT",7)==0){
	value=NULL;
	buffer=strtok(line," ");
	rm_Quot(buffer,keyword);
	buffer=strtok(NULL,"");
	strcpy(comment,buffer);
}	/*	if COMMENT	*/	
else if(strncmp(line,"   ",3)==0){
	value=NULL;
	keyword=NULL;
	comment=NULL;
}
else{	

if(strpbrk(line,"/")==NULL){
	if(strpbrk(line,"=")==NULL){
		buffer=strtok(line," ");
		rm_Quot(buffer,keyword);
		value=NULL;
		comment=NULL;
	}
	else{
		buffer=strtok(line,"=");
		rm_Quot(buffer,keyword);
		buffer=strtok(NULL,"=");
		rm_Quot(buffer,value);
		comment=NULL;
	}
}
else{
	remnant=strtok(line,"/");
	buffer=strtok(NULL,"/");
	strcpy(comment,buffer);
	if(strpbrk(remnant,"=")==NULL){
		strncpy(buffer,remnant,8);
		rm_Quot(buffer,keyword);
		value=NULL;
	}
	else{
		buffer=strtok(remnant,"=");
		rm_Quot(buffer,keyword);
		buffer=strtok(NULL,"=");
		rm_Quot(buffer,value);
	}
}

}	/*	else COMMENT	*/


return(0);
}	/*	end of this function	*/



int rm_Quot(original, compressed)
char	original[];
char	compressed[];
{
int	ii, jj;

ii=0;	jj=0;
while(original[ii]!=NULL){
	if((original[ii]!=' ')&&(original[ii]!='\'')&&(original[ii]!='\"')){			compressed[jj]=original[ii];
		ii++;	jj++;
	}
	else	ii++;

}	/*	while loop	*/
compressed[jj]=NULL;

return(0);
}	/*	end of this function	*/






	
